<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd ">
    <http:listener-config name="gpsatelite-quiter-sapi-httpListenerConfig">
        <http:listener-connection host="0.0.0.0" port="8081"/>
    </http:listener-config>
    <apikit:config name="gpsatelite-quiter-sapi-config" api="resource::fcd63b23-3d02-45f4-937a-0ccab76ab372:gpsatelite-quiter-sapi:1.0.2:raml:zip:gpsatelite-quiter-sapi.raml" outboundHeadersMapName="outboundHeaders" httpStatusVarName="httpsStatus" />
	<flow name="gpsatelite-quiter-sapi-main" initialState="started">
        <http:listener config-ref="gpsatelite-quiter-sapi-httpListenerConfig" path="/api/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body>#[payload]</http:body>
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:error-response>
        </http:listener>
        <apikit:router config-ref="gpsatelite-quiter-sapi-config" />
        <error-handler ref="global-error-handler">
            
        </error-handler>
    </flow>
    <flow name="put:\customers\(id):application\json:gpsatelite-quiter-sapi-config">
        <ee:transform doc:name="Transform Message">
            <ee:variables>
                <ee:set-variable variableName="id">attributes.uriParams.'id'</ee:set-variable>
            </ee:variables>
        </ee:transform>
        <ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  code: "1234",
  message: "Operation successful"
} as Object {encoding: "UTF-8", mediaType: "application/json"}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>
    <flow name="get:\appointments:gpsatelite-quiter-sapi-config">
        <ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
[
  {
    appointmentType: "Repair",
    clientReceived: true,
    comments: "Client reported strange noise when braking.",
    contactMail: "service@example.com",
    contactName: "John Doe",
    contactPhone: "555-789-1234",
    deliveryData: {
      delivertDate: "2024-06-17",
      deliveryTime: "10:00 AM",
      receptionistId: "REC789"
    },
    deliveryDate: "2024-06-17",
    deliveryLocation: "456 Oak St",
    deliveryName: "Emily Johnson",
    deliveryTime: "10:00 AM",
    finalDateReplacementCar: "",
    id: "AppID789",
    idBasket: "Basket789",
    idvReplacementCar: "",
    initialDateReplacementCar: "",
    kits: [
      {
        codekit: "Kit789",
        labours: [
          {
            code: "Labour004",
            description: "Brake inspection",
            time: 1.5
          }, 
          {
            code: "Labour005",
            description: "Replace brake pads",
            time: 2
          }
        ],
        spareParts: [
          {
            code: "Part004",
            quantity: "2"
          }, 
          {
            code: "Part005",
            quantity: "1"
          }
        ]
      }
    ],
    labours: [
      {
        description: "Brake inspection",
        id: "LabourID004",
        operatorId: "Operator123",
        plannedHours: "1.5",
        teamId: "Team123"
      }, 
      {
        description: "Replace brake pads",
        id: "LabourID005",
        operatorId: "Operator456",
        plannedHours: "2",
        teamId: "Team456"
      }
    ],
    mileage: 60000,
    needReplacementCar: true,
    pickUpVehicle: "",
    pickupDate: "",
    pickupLocation: "",
    pickupName: "",
    pickupTelephone: "",
    pickupTime: "",
    plannedData: {
      plannedDate: "2024-06-17",
      plannedTime: "10:00 AM",
      receptionistId: "REC789"
    },
    requestDelivery: true,
    requestPickup: false,
    spareParts: [
      {
        code: "Part004",
        quantiy: "2"
      }, 
      {
        code: "Part005",
        quantiy: "1"
      }
    ],
    telephoneDelivery: "555-789-1234",
    vehiclePlate: "ABC123",
    workshopId: "Workshop789"
  }, 
  {
    appointmentType: "Repair",
    clientReceived: true,
    comments: "Client reported strange noise when braking.",
    contactMail: "service@example.com",
    contactName: "John Doe",
    contactPhone: "555-789-1234",
    deliveryData: {
      delivertDate: "2024-06-17",
      deliveryTime: "10:00 AM",
      receptionistId: "REC789"
    },
    deliveryDate: "2024-06-17",
    deliveryLocation: "456 Oak St",
    deliveryName: "Emily Johnson",
    deliveryTime: "10:00 AM",
    finalDateReplacementCar: "",
    id: "AppID790",
    idBasket: "Basket789",
    idvReplacementCar: "",
    initialDateReplacementCar: "",
    kits: [
      {
        codekit: "Kit789",
        labours: [
          {
            code: "Labour004",
            description: "Brake inspection",
            time: 1.5
          }, 
          {
            code: "Labour005",
            description: "Replace brake pads",
            time: 2
          }
        ],
        spareParts: [
          {
            code: "Part004",
            quantity: "2"
          }, 
          {
            code: "Part005",
            quantity: "1"
          }
        ]
      }
    ],
    labours: [
      {
        description: "Brake inspection",
        id: "LabourID004",
        operatorId: "Operator123",
        plannedHours: "1.5",
        teamId: "Team123"
      }, 
      {
        description: "Replace brake pads",
        id: "LabourID005",
        operatorId: "Operator456",
        plannedHours: "2",
        teamId: "Team456"
      }
    ],
    mileage: 60000,
    needReplacementCar: true,
    pickUpVehicle: "",
    pickupDate: "",
    pickupLocation: "",
    pickupName: "",
    pickupTelephone: "",
    pickupTime: "",
    plannedData: {
      plannedDate: "2024-06-17",
      plannedTime: "10:00 AM",
      receptionistId: "REC789"
    },
    requestDelivery: true,
    requestPickup: false,
    spareParts: [
      {
        code: "Part004",
        quantiy: "2"
      }, 
      {
        code: "Part005",
        quantiy: "1"
      }
    ],
    telephoneDelivery: "555-789-1234",
    vehiclePlate: "ABC123",
    workshopId: "Workshop789"
  }
] as Array {encoding: "UTF-8", mediaType: "application/json"}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>
    <flow name="get:\customers:gpsatelite-quiter-sapi-config">
		<!-- [STUDIO:"Listener"]<http:listener doc:name="Listener" doc:id="cae49c34-5d26-44c7-a051-cd76ec3ad60f" config-ref="gpsatelite-quiter-sapi-httpListenerConfig" path="/customers" allowedMethods="GET"/> [STUDIO] -->
		<ee:transform doc:name="Transform Message" doc:id="6454acf1-8654-409a-8afe-f803b7c36253" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="lastModificationDateSince" ><![CDATA[attributes.queryParams.lastModificationDateSince as String]]></ee:set-variable>
				<ee:set-variable variableName="lastModificationDateTo" ><![CDATA[attributes.queryParams.lastModificationDateTo as String ]]></ee:set-variable>
				<ee:set-variable variableName="Authorization" ><![CDATA[attributes.queryParams.Authorization as String]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<http:request method="GET" doc:name="Quiter Internet Services - Customers Management" doc:id="730ee349-7175-4f4d-b284-779e15f22248" config-ref="HTTP_Request_API_Quiter" followRedirects="true" path='${quiter-api.enpointCustomers}'>
			<http:headers ><![CDATA[#[output application/java
---
{
	"Authorization" : "Bearer " ++ vars.Authorization as String,
	"lastModificationDateSince" : vars.lastModificationDateSince as String,
	"lastModificationDateTo" : vars.lastModificationDateTo as String
}]]]></http:headers>
			<http:uri-params ><![CDATA[#[output application/java
---
{
	"lastModificationDateSince" : vars.lastModificationDateSince as String,
	"lastModificationDateTo" : vars.lastModificationDateTo as String
}]]]></http:uri-params>
			<http:query-params ><![CDATA[#[output application/java
---
{
	"lastModificationDateSince" : vars.lastModificationDateSince as String,
	"lastModificationDateTo" : vars.lastModificationDateTo as String
}]]]></http:query-params>
		</http:request>
		<ee:transform doc:name="Transform Message" doc:id="de728173-cc72-4170-9cef-af4ecc4e2907">
			<ee:message>
				<ee:set-attributes><![CDATA[attributes.queryParams]]></ee:set-attributes>
			</ee:message>
		</ee:transform>
		<!-- [STUDIO:"Transform Message"]<ee:transform doc:name="Transform Message" doc:id="ba873e0f-f959-41f4-ae74-46dc76adcf5a">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
&#45;&#45;-
(payload.customers map ( customer , indexOfCustomer ) -> {
		typeRelationship: customer.relationshipOthersClients.typeRelationship,
		codeRelationship: customer.relationshipOthersClients.codeRelationship,
		country: (customer.country default "") ++ customer.country,
		door: (customer.door default "") ++ customer.door,
		birthdate: (customer.birthdate default "") ++ customer.birthdate,
		postalCode: (customer.postalCode default "") ++ customer.postalCode,
		language: customer.language,
		identificationType: customer.identificationType,
		publicDeedNumber: customer.publicDeedNumber,
		borough: customer.borough,
		legalRepresentativeGrantedDate: customer.legalRepresentativeGrantedDate,
		vehicleIdCustomer: customer.vehicleIdCustomer map ( vehicleIdCustomer , indexOfVehicleIdCustomer ) -> {
			vehicleIdCustomer: vehicleIdCustomer.vehicleIdCustomer
		},
		activityCode: customer.activityCode,
		lastModificationDate: customer.lastModificationDate,
		surname2: (customer.surname2 default "") ++ customer.surname2,
		vehicleIdAccount: customer.vehicleIdAccount map ( vehicleIdAccount , indexOfVehicleIdAccount ) -> {
			vehicleIdAccount: vehicleIdAccount.vehicleIdAccount
		},
		companyIncorporationDate: customer.companyIncorporationDate,
		fiscalAddressNumber: (customer.fiscalAddressNumber default "") ++ customer.fiscalAddressNumber,
		id: ((customer.id default "") ++ customer.id) ++ customer.id,
		state: customer.state,
		fax: (customer.fax default "") ++ customer.fax,
		curp: customer.curp,
		companyRegistrationDate: customer.companyRegistrationDate,
		profession: (customer.profession default "") ++ customer.profession,
		vehicleIdDriver: customer.vehicleIdDriver map ( vehicleIdDriver , indexOfVehicleIdDriver ) -> {
			vehicleIdDriver: vehicleIdDriver.vehicleIdDriver
		},
		authorizesOffers: (customer.authorizesOffers default "") ++ customer.authorizesOffers,
		authorizesProcessing: customer.authorizesProcessing and customer.authorizesProcessing,
		streetNumber: (customer.streetNumber default "") ++ customer.streetNumber,
		economicActivity: (customer.economicActivity default "") ++ customer.economicActivity,
		fiscalAddress: (customer.fiscalAddress default "") ++ customer.fiscalAddress,
		authorizesOthers: ((customer.authorizesOthers default "") ++ customer.authorizesOthers) ++ customer.authorizesOthers,
		authorizesProfile: (customer.authorizesProfile default "") ++ customer.authorizesProfile,
		notary: customer.notary,
		nationality: (customer.nationality default "") ++ customer.nationality,
		emailNotAvailable: (customer.emailNotAvailable default "") ++ customer.emailNotAvailable,
		name: (customer.name default "") ++ customer.name,
		registerUser: (customer.registerUser default "") ++ customer.registerUser,
		cancelled: customer.cancelled and customer.cancelled,
		neighborhood: customer.neighborhood,
		RFCLegalRepresentative: customer.RFCLegalRepresentative,
		maritalStatus: (customer.maritalStatus default "") ++ customer.maritalStatus,
		receptionistId: (customer.receptionistId default "") ++ customer.receptionistId,
		authCommercialCommunications: customer.authCommercialCommunications and customer.authCommercialCommunications,
		minDate: (customer.minDate default "") ++ customer.minDate,
		gender: (customer.gender default "") ++ customer.gender,
		documentType: (customer.documentType default "") ++ customer.documentType,
		city: (customer.city default "") ++ customer.city,
		document: (customer.document default "") ++ customer.document,
		authorizations: customer.authorizations map ( authorization , indexOfAuthorization ) -> {
			authorizationTransfer: authorization.authorizationTransfer,
			authorizationSurveys: authorization.authorizationSurveys,
			authorizationContractCompliance: authorization.authorizationContractCompliance,
			authorizationDate: (authorization.authorizationSurveys default "") ++ authorization.authorizationDate,
			authorizationOthers: authorization.authorizationOthers,
			authorizationBrand: authorization.authorizationBrand,
			authorizationMarketing: authorization.authorizationMarketing,
			authorizationOffers: authorization.authorizationOffers,
			authorizationProfile: authorization.authorizationProfile
		},
		dataProtection2: customer.dataProtection2 and customer.dataProtection2,
		authorityIssuingIdent: customer.authorityIssuingIdent,
		relationshipOthersClients: customer.relationshipOthersClients,
		dataProtection1: customer.dataProtection1 and customer.dataProtection1,
		title: (customer.title default "") ++ customer.title,
		phoneNumbers: (customer.phoneNumbers map ( phoneNumber , indexOfPhoneNumber ) -> {
			extension: (phoneNumber.extension default "") ++ phoneNumber.extension,
			phoneNumber: (phoneNumber.phoneNumber default "") ++ phoneNumber.phoneNumber,
			observations: (phoneNumber.observations
		default "") ++ phoneNumber.observations
		}) ++ (customer.phoneNumbers map ( phoneNumber , indexOfPhoneNumber ) -> {
		}),
		publicDeedNumberCity: customer.publicDeedNumberCity,
		vehicleIdOwner: customer.vehicleIdOwner map ( vehicleIdOwner , indexOfVehicleIdOwner ) -> {
			vehicleIdOwner: vehicleIdOwner.vehicleIdOwner
		},
		legalRepresentative: customer.legalRepresentative,
		tradeName: (customer.tradeName default "") ++ customer.tradeName,
		dataProtection7: customer.dataProtection7 and customer.dataProtection7,
		dataProtection6: customer.dataProtection6 and customer.dataProtection6,
		dataProtection5: customer.dataProtection5 and customer.dataProtection5,
		fiscalCity: (customer.fiscalCity default "") ++ customer.fiscalCity,
		currencyDefault: (customer.currencyDefault default "") ++ customer.currencyDefault,
		dataProtection4: customer.dataProtection4 and customer.dataProtection4,
		street: (customer.street default "") ++ customer.street,
		surname: (customer.surname default "") ++ customer.surname,
		notaryNumber: customer.notaryNumber,
		dataProtection3: customer.dataProtection3 and customer.dataProtection3,
		authorizesMarketing: (customer.authorizesMarketing default "") ++ customer.authorizesMarketing,
		authorizesTransfer: customer.authorizesTransfer and customer.authorizesTransfer,
		company: customer.company,
		currency: (customer.currency default "") ++ customer.currency,
		authorizesUse: (customer.authorizesUse default "") ++ customer.authorizesUse,
		floor: (customer.floor default "") ++ customer.floor,
		authorizesComplianceCont: (customer.authorizesComplianceCont default "") ++ customer.authorizesComplianceCont,
		email: (customer.email default "") ++ customer.email,
		registerDate: (customer.registerDate default "") ++ customer.registerDate,
		mobilePhoneNumber: customer.mobilePhoneNumber map ( mobilePhoneNumber , indexOfMobilePhoneNumber ) -> {
			phoneNumber: mobilePhoneNumber.phoneNumber,
			observations: mobilePhoneNumber.observations
		},
		addressExtension1: customer.addressExtension1,
		website: customer.webSite,
		addressExtension2: customer.addressExtension2,
		address: (customer.address default "") ++ customer.address,
		courtesyCode: (customer.courtesyCode default "") ++ customer.courtesyCode,
		customerRecordNotes: customer.customerRecordNotes map ( customerRecordNote , indexOfCustomerRecordNote ) -> customerRecordNote,
		fullName: (customer.fullName default "") ++ customer.fullName,
		profesionalCategory: customer.profesionalCategory,
		authorizesSurveys: (customer.authorizesSurveys default "") ++ customer.authorizesSurveys,
		identificationNumber: customer.identificationNumber,
		documentId: (customer.documentId default "") ++ customer.documentId,
		maxDate: (customer.maxDate default "") ++ customer.maxDate,
		category: (customer.category default "") ++ customer.category,
		authorizesDate: (customer.authorizesDate default "") ++ customer.authorizesDate,
		contacts: customer.contacts map ( contact , indexOfContact ) -> {
			comments: contact.comments,
			telephoneTime: contact.telephoneTime,
			name: contact.name,
			degree: contact.degree,
			telephone: contact.telephone,
			email: contact.email
		},
		numberChildren: (customer.numberChildren
	default "") ++ customer.numberChildren,
		fiscalStatus: customer.fiscalStatus
} as Object {
	encoding: "UTF-8", mediaType: "application/json"
})&#93;&#93;></ee:set-payload>
            </ee:message>
        </ee:transform> [STUDIO] -->
    </flow>
    <flow name="get:\appointments\(id):application\json:gpsatelite-quiter-sapi-config">
        <ee:transform doc:name="Transform Message">
            <ee:variables>
                <ee:set-variable variableName="id">attributes.uriParams.'id'</ee:set-variable>
            </ee:variables>
        </ee:transform>
        <ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  appointmentType: "Repair",
  clientReceived: true,
  comments: "Client reported strange noise when braking.",
  contactMail: "service@example.com",
  contactName: "John Doe",
  contactPhone: "555-789-1234",
  deliveryData: {
    delivertDate: "2024-06-17",
    deliveryTime: "10:00 AM",
    receptionistId: "REC789"
  },
  deliveryDate: "2024-06-17",
  deliveryLocation: "456 Oak St",
  deliveryName: "Emily Johnson",
  deliveryTime: "10:00 AM",
  finalDateReplacementCar: "",
  id: "AppID789",
  idBasket: "Basket789",
  idvReplacementCar: "",
  initialDateReplacementCar: "",
  kits: [
    {
      codekit: "Kit789",
      labours: [
        {
          code: "Labour004",
          description: "Brake inspection",
          time: 1.5
        }, 
        {
          code: "Labour005",
          description: "Replace brake pads",
          time: 2
        }
      ],
      spareParts: [
        {
          code: "Part004",
          quantity: "2"
        }, 
        {
          code: "Part005",
          quantity: "1"
        }
      ]
    }
  ],
  labours: [
    {
      description: "Brake inspection",
      id: "LabourID004",
      operatorId: "Operator123",
      plannedHours: "1.5",
      teamId: "Team123"
    }, 
    {
      description: "Replace brake pads",
      id: "LabourID005",
      operatorId: "Operator456",
      plannedHours: "2",
      teamId: "Team456"
    }
  ],
  mileage: 60000,
  needReplacementCar: true,
  pickUpVehicle: "",
  pickupDate: "",
  pickupLocation: "",
  pickupName: "",
  pickupTelephone: "",
  pickupTime: "",
  plannedData: {
    plannedDate: "2024-06-17",
    plannedTime: "10:00 AM",
    receptionistId: "REC789"
  },
  requestDelivery: true,
  requestPickup: false,
  spareParts: [
    {
      code: "Part004",
      quantiy: "2"
    }, 
    {
      code: "Part005",
      quantiy: "1"
    }
  ],
  telephoneDelivery: "555-789-1234",
  vehiclePlate: "ABC123",
  workshopId: "Workshop789"
} as Object {encoding: "UTF-8", mediaType: "application/json"}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>
    <flow name="post:\appointments:application\json:gpsatelite-quiter-sapi-config">
        <ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  appointmentType: "Service",
  clientReceived: true,
  comments: "Appointment comments here",
  contactMail: "contact@example.com",
  contactName: "John Doe",
  contactPhone: "123-456-7890",
  deliveryData: {
    delivertDate: "2024-06-10",
    deliveryTime: "10:00 AM",
    receptionistId: "REC123"
  },
  deliveryDate: "2024-06-10",
  deliveryLocation: "123 Main St",
  deliveryName: "Jane Doe",
  deliveryTime: "10:00 AM",
  finalDateReplacementCar: "",
  id: "AppID123",
  idBasket: "Basket123",
  idvReplacementCar: "",
  initialDateReplacementCar: "",
  kits: [
    {
      codekit: "Kit123",
      labours: [
        {
          code: "Labour001",
          description: "Labour description here",
          time: 2
        }
      ],
      spareParts: [
        {
          code: "Part001",
          quantity: "1"
        }
      ]
    }
  ],
  labours: [
    {
      description: "Labour description",
      id: "LabourID001",
      operatorId: "Operator123",
      plannedHours: "2",
      teamId: "Team123"
    }
  ],
  mileage: 50000,
  needReplacementCar: false,
  pickUpVehicle: "Customer request to pick up the vehicle",
  pickupDate: "2024-06-10",
  pickupLocation: "456 Oak St",
  pickupName: "John Doe",
  pickupTelephone: "987-654-3210",
  pickupTime: "10:00 AM",
  plannedData: {
    plannedDate: "2024-06-10",
    plannedTime: "10:00 AM",
    receptionistId: "REC123"
  },
  requestDelivery: true,
  requestPickup: true,
  spareParts: [
    {
      code: "Part001",
      quantiy: "1"
    }
  ],
  telephoneDelivery: "987-654-3210",
  vehiclePlate: "ABC123",
  workshopId: "Workshop123"
} as Object {encoding: "UTF-8", mediaType: "application/json"}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>
    <flow name="post:\customers:application\json:gpsatelite-quiter-sapi-config">
        <ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  code: "1234",
  message: "Operation successful"
} as Object {encoding: "UTF-8", mediaType: "application/json"}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>
</mule>
